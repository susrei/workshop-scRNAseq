---
title: "{{< meta st_title >}}"
subtitle: "{{< meta subtitle_bioc >}}"
description: "{{< meta st_description >}}"
format: html
---

::: {.callout-note}
Code chunks run R commands unless otherwise specified.
:::

{{< meta st_1 >}}

## {{< meta st_prep >}}

{{< meta st_prep_1 >}}

```{r}
# BiocManager::install('DropletUtils',update = F)
# BiocManager::install("Spaniel",update = F)
# remotes::install_github("RachelQueen1/Spaniel", ref = "Development" ,upgrade = F,dependencies = F)
# remotes::install_github("renozao/xbioc")
# remotes::install_github("meichendong/SCDC")

suppressPackageStartupMessages({
    library(Spaniel)
    # library(biomaRt)
    library(SingleCellExperiment)
    library(Matrix)
    library(dplyr)
    library(scran)
    library(SingleR)
    library(scater)
    library(ggplot2)
    library(patchwork)
})
```

{{< meta st_prep_2 >}}

```{r}
# url for source and intermediate data
path_data <- "https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq"
```

```{r}
if (!dir.exists("data/spatial/visium/Anterior")) dir.create("data/spatial/visium/Anterior", recursive = T)
if (!dir.exists("data/spatial/visium/Posterior")) dir.create("data/spatial/visium/Posterior", recursive = T)

file_list <- c(
    "spatial/visium/Anterior/V1_Mouse_Brain_Sagittal_Anterior_filtered_feature_bc_matrix.tar.gz",
    "spatial/visium/Anterior/V1_Mouse_Brain_Sagittal_Anterior_spatial.tar.gz",
    "spatial/visium/Posterior/V1_Mouse_Brain_Sagittal_Posterior_filtered_feature_bc_matrix.tar.gz",
    "spatial/visium/Posterior/V1_Mouse_Brain_Sagittal_Posterior_spatial.tar.gz"
)

for (i in file_list) {
    if (!file.exists(file.path("data", i))) {
        cat(paste0("Downloading ", file.path(path_data, i), " to ", file.path("data", i), "\n"))
        download.file(url = file.path(path_data, i), destfile = file.path("data", i))
    }
    cat(paste0("Uncompressing ", file.path("data", i), "\n"))
    system(paste0("tar -xvzf ", file.path("data", i), " -C ", dirname(file.path("data", i))))
}
```

Merge the objects into one SCE object.

```{r}
sce.a <- Spaniel::createVisiumSCE(tenXDir = "data/spatial/visium/Anterior", resolution = "Low")
sce.p <- Spaniel::createVisiumSCE(tenXDir = "data/spatial/visium/Posterior", resolution = "Low")
sce <- cbind(sce.a, sce.p)

sce$Sample <- basename(sub("/filtered_feature_bc_matrix", "", sce$Sample))

lll <- list(sce.a, sce.p)
lll <- lapply(lll, function(x) x@metadata)
names(lll) <- c("Anterior", "Posterior")
sce@metadata <- lll
```

We can further convert the gene ensembl IDs to gene names using biomaRt.

```{r}
#| eval: false
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl")
annot <- biomaRt::getBM(attributes = c("ensembl_gene_id", "external_gene_name", "gene_biotype"), mart = mart, useCache = F)
saveRDS(annot, "data/spatial/visium/annot.rds")
```

We will use a file that was created in advance.

```{r}
path_file <- "data/spatial/visium/annot.rds"
if (!file.exists(path_file)) download.file(url = file.path(path_data, "spatial/visium/annot.rds"), destfile = path_file)
annot <- readRDS(path_file)
```

```{r}
gene_names <- as.character(annot[match(rownames(sce), annot[, "ensembl_gene_id"]), "external_gene_name"])
gene_names[is.na(gene_names)] <- ""

sce <- sce[gene_names != "", ]
rownames(sce) <- gene_names[gene_names != ""]
dim(sce)
```

## {{< meta st_qc >}}

{{< meta st_qc_1 >}}

Now the counts and feature counts are calculated on the Spatial assay, so they are named  **nCount_Spatial** and **nFeature_Spatial**.

```{r}
#| fig-height: 7
#| fig-width: 11

# Mitochondrial genes
mito_genes <- rownames(sce)[grep("^mt-", rownames(sce))]

# Ribosomal genes
ribo_genes <- rownames(sce)[grep("^Rp[sl]", rownames(sce))]

# Hemoglobin genes - includes all genes starting with HB except HBP.
hb_genes <- rownames(sce)[grep("^Hb[^(p)]", rownames(sce))]

sce <- addPerCellQC(sce, flatten = T, subsets = list(mt = mito_genes, hb = hb_genes, ribo = ribo_genes))

head(colData(sce))

wrap_plots(plotColData(sce, y = "detected", x = "Sample", colour_by = "Sample"),
    plotColData(sce, y = "total", x = "Sample", colour_by = "Sample"),
    plotColData(sce, y = "subsets_mt_percent", x = "Sample", colour_by = "Sample"),
    plotColData(sce, y = "subsets_ribo_percent", x = "Sample", colour_by = "Sample"),
    plotColData(sce, y = "subsets_hb_percent", x = "Sample", colour_by = "Sample"),
    ncol = 3
)
```

{{< meta st_qc_2 >}}

```{r}
#| fig-height: 15
#| fig-width: 8

samples <- c("Anterior", "Posterior")
to_plot <- c("detected", "total", "subsets_mt_percent", "subsets_ribo_percent", "subsets_hb_percent")

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Cluster",
            clusterRes = j, customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}

wrap_plots(plist, ncol = 2)
```

{{< meta st_qc_3 >}}

### {{< meta st_qc_filter >}}

{{< meta st_qc_filter_1 >}}

```{r}
sce <- sce[, sce$detected > 500 &
    sce$subsets_mt_percent < 25 &
    sce$subsets_hb_percent < 20]
dim(sce)
```

And replot onto tissue section:

```{r}
#| fig-height: 15
#| fig-width: 8

samples <- c("Anterior", "Posterior")
to_plot <- c("detected", "total", "subsets_mt_percent", "subsets_mt_percent", "subsets_hb_percent")

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Cluster",
            clusterRes = j, customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}

wrap_plots(plist, ncol = 2)
```

### {{< meta st_qc_top >}}

{{< meta st_qc_top_1 >}}

```{r}
#| fig-height: 6
#| fig-width: 6

C <- counts(sce)
C@x <- C@x / rep.int(colSums(C), diff(C@p))
most_expressed <- order(Matrix::rowSums(C), decreasing = T)[20:1]
boxplot(as.matrix(t(C[most_expressed, ])), cex = .1, las = 1, xlab = "% total count per cell", col = scales::hue_pal()(20)[20:1], horizontal = TRUE)
rm(C)
```

{{< meta st_qc_top_2 >}}

### {{< meta st_qc_filterg >}}

{{< meta st_qc_filterg_1 >}}

```{r}
dim(sce)

# Filter Bl1
sce <- sce[!grepl("Bc1", rownames(sce)), ]

# Filter Mitocondrial
sce <- sce[!grepl("^mt-", rownames(sce)), ]

# Filter Hemoglobin gene (optional if that is a problem on your data)
sce <- sce[!grepl("^Hb.*-", rownames(sce)), ]

dim(sce)
```

## {{< meta st_analysis >}}

{{< meta st_analysis_1 >}}

```{r}
sce <- computeSumFactors(sce, sizes = c(20, 40, 60, 80))
sce <- logNormCounts(sce)
```

{{< meta st_analysis_2 >}}

```{r}
#| fig-height: 6
#| fig-width: 6.5

samples <- c("Anterior", "Posterior")
to_plot <- c("Hpca", "Ttr")

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Gene",
            gene = j,
            customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}

wrap_plots(plist, ncol = 2)
```

### {{< meta st_analysis_dimred >}}

{{< meta st_analysis_dimred_1 >}}

But make sure you run it on the `SCT` assay.

```{r}
var.out <- modelGeneVar(sce, method = "loess")
hvgs <- getTopHVGs(var.out, n = 2000)
sce <- runPCA(sce,
    exprs_values = "logcounts",
    subset_row = hvgs,
    ncomponents = 50,
    ntop = 100,
    scale = T
)
g <- buildSNNGraph(sce, k = 5, use.dimred = "PCA")
sce$louvain_SNNk5 <- factor(igraph::cluster_louvain(g)$membership)
sce <- runUMAP(sce,
    dimred = "PCA", n_dimred = 50, ncomponents = 2, min_dist = 0.1, spread = .3,
    metric = "correlation", name = "UMAP_on_PCA"
)
```

{{< meta st_analysis_dimred_2 >}}

```{r}
#| fig-height: 8
#| fig-width: 9

samples <- c("Anterior", "Posterior")
to_plot <- c("louvain_SNNk5")

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Cluster", clusterRes = j,
            customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}

plist[[3]] <- plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = "louvain_SNNk5")
plist[[4]] <- plotReducedDim(sce, dimred = "UMAP_on_PCA", colour_by = "Sample")

wrap_plots(plist, ncol = 2)
```

### {{< meta st_analysis_int >}}

{{< meta st_analysis_int_1 >}}

We will do a similar integration as in the Data Integration lab.

```{r}
mnn_out <- batchelor::fastMNN(sce, subset.row = hvgs, batch = factor(sce$Sample), k = 20, d = 50)

reducedDim(sce, "MNN") <- reducedDim(mnn_out, "corrected")
rm(mnn_out)
gc()
```

{{< meta st_analysis_int_2 >}}

```{r}
g <- buildSNNGraph(sce, k = 5, use.dimred = "MNN")
sce$louvain_SNNk5 <- factor(igraph::cluster_louvain(g)$membership)
sce <- runUMAP(sce,
    dimred = "MNN", n_dimred = 50, ncomponents = 2, min_dist = 0.1, spread = .3,
    metric = "correlation", name = "UMAP_on_MNN"
)
```

```{r}
#| fig-height: 8
#| fig-width: 9

samples <- c("Anterior", "Posterior")
to_plot <- c("louvain_SNNk5")

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Cluster", clusterRes = j,
            customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}

plist[[3]] <- plotReducedDim(sce, dimred = "UMAP_on_MNN", colour_by = "louvain_SNNk5")
plist[[4]] <- plotReducedDim(sce, dimred = "UMAP_on_MNN", colour_by = "Sample")

wrap_plots(plist, ncol = 2)
```

:::{.callout-note title="Discuss"}
{{< meta st_analysis_int_3 >}}
:::

### {{< meta st_analysis_svg >}}

{{< meta st_analysis_svg_1 >}}

```{r}
#| fig-height: 15
#| fig-width: 7

# differential expression between cluster 4 and cluster 6
cell_selection <- sce[, sce$louvain_SNNk5 %in% c(4, 6)]
cell_selection$louvain_SNNk5 <- factor(cell_selection$louvain_SNNk5)

markers_genes <- scran::findMarkers(
    x = cell_selection,
    groups = cell_selection$louvain_SNNk5,
    lfc = .25,
    pval.type = "all",
    direction = "up"
)

# List of dataFrames with the results for each cluster
top5_cell_selection <- lapply(names(markers_genes), function(x) {
    temp <- markers_genes[[x]][1:5, 1:2]
    temp$gene <- rownames(markers_genes[[x]])[1:5]
    temp$cluster <- x
    return(temp)
})
top5_cell_selection <- as_tibble(do.call(rbind, top5_cell_selection))
top5_cell_selection

# plot top markers
samples <- c("Anterior", "Posterior")
to_plot <- top5_cell_selection$gene[1:5]

plist <- list()
n <- 1
for (j in to_plot) {
    for (i in samples) {
        temp <- sce[, sce$Sample == i]
        temp@metadata <- temp@metadata[[i]]
        plist[[n]] <- spanielPlot(
            object = temp,
            plotType = "Gene",
            gene = j,
            customTitle = j,
            techType = "Visium",
            ptSizeMax = 1, ptSizeMin = .1
        )
        n <- n + 1
    }
}
wrap_plots(plist, ncol = 2)
```

## {{< meta st_ss >}}

{{< meta st_ss_1 >}}

First dowload the seurat data:

```{r}
path_file <- "data/spatial/visium/allen_cortex.rds"
if (!file.exists(path_file)) download.file(url = file.path(path_data, "spatial/visium/allen_cortex.rds"), destfile = path_file)
```

{{< meta st_ss_2 >}}

```{r subset_sc}
ar <- readRDS(path_file)
ar_sce <- Seurat::as.SingleCellExperiment(ar)
rm(ar)
gc()

# check number of cells per subclass
ar_sce$subclass <- sub("/", "_", sub(" ", "_", ar_sce$subclass))
table(ar_sce$subclass)

# select 20 cells per subclass, fist set subclass as active.ident
subset_cells <- lapply(unique(ar_sce$subclass), function(x) {
    if (sum(ar_sce$subclass == x) > 20) {
        temp <- sample(colnames(ar_sce)[ar_sce$subclass == x], size = 20)
    } else {
        temp <- colnames(ar_sce)[ar_sce$subclass == x]
    }
})
ar_sce <- ar_sce[, unlist(subset_cells)]

# check again number of cells per subclass
table(ar_sce$subclass)
```

Then run normalization and dimensionality reduction.

```{r}
ar_sce <- computeSumFactors(ar_sce, sizes = c(20, 40, 60, 80))
ar_sce <- logNormCounts(ar_sce)
allen.var.out <- modelGeneVar(ar_sce, method = "loess")
allen.hvgs <- getTopHVGs(allen.var.out, n = 2000)
```

## {{< meta st_sub >}}

{{< meta st_sub_1 >}}

### Integrate with scRNAseq

Here, will use SingleR for prediciting which cell types are present in the dataset. We can first select the anterior part as an example (to speed up predictions).

```{r}
sce.anterior <- sce[, sce$Sample == "Anterior"]
sce.anterior@metadata <- sce.anterior@metadata[["Anterior"]]
```

Next, we select the highly variable genes that are present in both datasets.

```{r}
# Find common highly variable genes
common_hvgs <- intersect(allen.hvgs, hvgs)

# Predict cell classes
pred.grun <- SingleR(
    test = sce.anterior[common_hvgs, ],
    ref = ar_sce[common_hvgs, ],
    labels = ar_sce$subclass
)

# Transfer the classes to the SCE object
sce.anterior$cell_prediction <- pred.grun$labels
sce.anterior@colData <- cbind(
    sce.anterior@colData,
    as.data.frame.matrix(table(list(1:ncol(sce.anterior), sce.anterior$cell_prediction)))
)
```

Then we can plot the predicted cell populations back to tissue.

```{r}
#| fig-height: 5
#| fig-width: 5.5

# Plot cell predictions
spanielPlot(
    object = sce.anterior,
    plotType = "Cluster",
    clusterRes = "cell_prediction",
    customTitle = "cell_prediction",
    techType = "Visium",
    ptSizeMax = 1, ptSizeMin = .1
)
```

```{r}
#| fig-height: 8
#| fig-width: 9

plist <- list()
n <- 1
for (i in c("L2_3_IT", "L4", "L5_IT", "L6_IT")) {
    plist[[n]] <- spanielPlot(
        object = sce.anterior,
        plotType = "Cluster",
        clusterRes = i,
        customTitle = i,
        techType = "Visium", ptSize = .3,
        ptSizeMax = 1, ptSizeMin = .1
    )
    n <- n + 1
}
wrap_plots(plist, ncol = 2)
```

Keep in mind, that the scores are "just" prediction scores, and do not correspond to proportion of cells that are of a certain celltype or similar. It mainly tell you that gene expression in a certain spot is hihgly similar/dissimilar to gene expression of a celltype. If we look at the scores, we see that some spots got really clear predictions by celltype, while others did not have high scores for any of the celltypes.

We can also plot the gene expression and add filters together, too:

```{r}
#| fig-height: 6
#| fig-width: 6.5

spanielPlot(
    object = sce.anterior,
    plotType = "Gene",
    gene = "Wfs1",
    showFilter = sce.anterior$L4,
    customTitle = "",
    techType = "Visium",
    ptSize = 0, ptSizeMin = -.3, ptSizeMax = 1
)
```

## {{< meta session >}}

<details>
  <summary>Click here</summary>

```{r}
sessionInfo()
```

</details>
